from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    ApplicationBuilder, MessageHandler, CommandHandler,
    CallbackQueryHandler, ContextTypes, filters
)
import config
key = config.get_key()

# ==== VISTAS / MEN√ö ====
def main_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üó∫Ô∏è Ver cercanos", callback_data="menu:nearby")],
        [InlineKeyboardButton("üìù Reportar incidente", callback_data="menu:report")],
        [InlineKeyboardButton("üîî Suscripciones", callback_data="menu:subs")],
        [InlineKeyboardButton("‚ùì Ayuda", callback_data="menu:help")],
        [InlineKeyboardButton("‚ÑπÔ∏è Sobre el bot", callback_data="menu:about")]
    ])

# ==== HANDLERS ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # /start o volver al men√∫
    if update.message:
        await update.message.reply_text(
            "Elige una opci√≥n:",
            reply_markup=main_menu_keyboard()
        )
    else:
        # por si llega desde callback y queremos 'refrescar' el mensaje
        await update.callback_query.edit_message_text(
            "Elige una opci√≥n:",
            reply_markup=main_menu_keyboard()
        )

async def on_menu_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Enruta por callback_data del men√∫."""
    query = update.callback_query
    await query.answer()  # ack r√°pido para UX

    data = query.data  # p.ej. "menu:nearby"
    if data == "menu:nearby":
        # Aqu√≠ luego pedir√°s ubicaci√≥n y listar√°s posts cercanos
        await query.edit_message_text(
            "üîé Env√≠ame tu ubicaci√≥n para buscar incidentes cercanos.\n\n"
            "üëâ Puedes compartirla desde el clip (üìé) > Ubicaci√≥n.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è Volver", callback_data="menu:root")]
            ])
        )

    elif data == "menu:report":
        # Aqu√≠ puedes iniciar un "wizard" de reporte
        await query.edit_message_text(
            "üìù Vamos a reportar un incidente.\n"
            "1) Env√≠ame la ubicaci√≥n.\n"
            "2) Luego te pedir√© el tipo (retenci√≥n/accidente/obra...).",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è Volver", callback_data="menu:root")]
            ])
        )

    elif data == "menu:subs":
        await query.edit_message_text(
            "üîî Suscripciones: podr√°s seguir una zona/v√≠a y horario.\n"
            "Pr√≥ximo paso: elegir zona o v√≠a.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è Volver", callback_data="menu:root")]
            ])
        )

    elif data == "menu:help":
        await query.edit_message_text(
            "‚ùì Ayuda\n\n"
            "‚Ä¢ üó∫Ô∏è Ver cercanos: busca incidentes cerca de ti.\n"
            "‚Ä¢ üìù Reportar: crea un nuevo aviso con tu ubicaci√≥n.\n"
            "‚Ä¢ üîî Suscripciones: recibe alertas por zona/v√≠a.\n\n"
            "Comandos: /start para volver al men√∫.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è Volver", callback_data="menu:root")]
            ])
        )
    elif data == "menu:about":
        await query.edit_message_text(
            "‚ÑπÔ∏è Sobre el bot\n\n"
            "UVaTr√°fico Bot v1\\.0\n"
            "Desarrollado por Ichiro Hitomi\n"
            "[Github](https://github.com/ichhito/UVaTraficoBot)",
            parse_mode="MarkdownV2",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è Volver", callback_data="menu:root")]
            ])
        )


    elif data == "menu:root":
        # Volver al men√∫ principal
        await start(update, context)

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Responde con el mismo texto (lo mantengo como pediste)
    text = update.message.text
    await update.message.reply_text(text)

# (Opcional) Recibir ubicaciones ya desde ahora
async def on_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    loc = update.message.location
    await update.message.reply_text(
        f"üìç Ubicaci√≥n recibida: {loc.latitude:.5f}, {loc.longitude:.5f}\n"
        "Pronto te mostrar√© incidentes cercanos aqu√≠."
    )

# ==== ARRANQUE ====
async def _setup_commands(app):
    # Men√∫ de comandos del cliente (barra /)
    cmds = [
        BotCommand("start", "Abrir men√∫"),
        BotCommand("help", "Ayuda"),
    ]
    await app.bot.set_my_commands(cmds)

def main():
    app = ApplicationBuilder().token(key).build()

    # Comandos
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", start))

    # Men√∫ (callbacks)
    app.add_handler(CallbackQueryHandler(on_menu_click, pattern=r"^menu:"))

    # Ubicaciones (si las env√≠an desde el clip)
    app.add_handler(MessageHandler(filters.LOCATION, on_location))

    # Echo para cualquier texto que no sea comando
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # Configura comandos visibles en el cliente
    app.post_init = _setup_commands

    print("ü§ñ Bot en marcha. Pulsa Ctrl+C para detenerlo.")
    app.run_polling()

if __name__ == "__main__":
    main()
